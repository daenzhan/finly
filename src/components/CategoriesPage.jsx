// src/pages/CategoriesPage.js
import React, { useState, useEffect } from 'react';
import { useSelector, useDispatch } from 'react-redux';
import { Link } from 'react-router-dom';
import { fetchCategories, addCategory, deleteCategory } from '../redux/actions/categoryActions';
import { toast } from 'react-toastify';
import styles from '../styles/CategoriesPage.module.css'

const defaultIncomeCategories = [
  { id: 'default_salary', name: '–ó–∞—Ä–ø–ª–∞—Ç–∞', icon: 'üíº', color: '#4CAF50', type: 'income' },
  { id: 'default_scholarship', name: '–°—Ç–∏–ø–µ–Ω–¥–∏—è', icon: 'üéì', color: '#8BC34A', type: 'income' },
  { id: 'default_pension', name: '–ü–µ–Ω—Å–∏—è', icon: 'üëµ', color: '#CDDC39', type: 'income' },
  { id: 'default_other_income', name: '–î—Ä—É–≥–æ–µ', icon: 'üí∞', color: '#FFC107', type: 'income' }
];

const defaultExpenseCategories = [
  { id: 'default_transport', name: '–¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç', icon: 'üöï', color: '#F44336', type: 'expense' },
  { id: 'default_products', name: '–ü—Ä–æ–¥—É–∫—Ç—ã', icon: 'üçé', color: '#E91E63', type: 'expense' },
  { id: 'default_shopping', name: '–ü–æ–∫—É–ø–∫–∏', icon: 'üõçÔ∏è', color: '#9C27B0', type: 'expense' },
  { id: 'default_entertainment', name: '–†–∞–∑–≤–ª–µ—á–µ–Ω–∏—è', icon: 'üé¨', color: '#673AB7', type: 'expense' },
  { id: 'default_other_expense', name: '–î—Ä—É–≥–æ–µ', icon: 'üí∏', color: '#3F51B5', type: 'expense' }
];

const EMOJI_GROUPS = {
  'Food': ['üçé', 'üçî', 'üçï', 'üçü', 'üåÆ', 'üç£', 'üçú', 'üç¶', '‚òï', 'üç∫'],
  'Transport': ['üöó', 'üöï', 'üö≤', '‚úàÔ∏è', 'üöÜ', 'üö¢', 'üõµ', 'üöÄ'],
  'Finance': ['üí∞', 'üíµ', 'üí≥', 'üè¶', 'üìà', 'üí≤'],
  'Entertainment': ['üé¨', 'üéÆ', 'üéß', 'üé§', 'üé≠', 'üé≤'],
  'Shopping': ['üõçÔ∏è', 'üëï', 'üë†', 'üõí', 'üéÅ'],
  'Health': ['üíä', 'üè•', 'üöë', 'ü©∫', 'üíâ'],
  'Education': ['üìö', 'üéì', '‚úèÔ∏è', 'üìù', 'üè´'],
  'Home': ['üè†', 'üõãÔ∏è', 'üõèÔ∏è', 'üöø', 'üç≥'],
  'Other': ['‚ù§Ô∏è', '‚≠ê', 'üéØ', 'üîë', '‚è∞']
};


export default function CategoriesPage() {
  const dispatch = useDispatch();
  const [showModal, setShowModal] = useState(false);
  const [showCustomIconInput, setShowCustomIconInput] = useState(false);
  const [newCategory, setNewCategory] = useState({
    name: '',
    type: 'expense',
    icon: 'üí∞', 
    color: '#4CAF50',
    customIcon: '' 
  });

  const { user } = useSelector((state) => state.auth);
  const { 
    data: categories, 
    loading, 
    error 
  } = useSelector((state) => state.categories);

  useEffect(() => {
    if (user?.id) {
      dispatch(fetchCategories(user.id));
    }
  }, [dispatch, user?.id]);

  const userIncomeCategories = categories?.filter(cat => cat.type === 'income') || [];
  const userExpenseCategories = categories?.filter(cat => cat.type === 'expense') || [];

  const handleAddCategory = async (e) => {
    e.preventDefault();
    
    if (!newCategory.icon) {
      toast.error('–í—ã–±–µ—Ä–∏—Ç–µ –∏–∫–æ–Ω–∫—É');
      return;
    }
  
    try {
      await dispatch(addCategory({
        ...newCategory,
        userId: user.id,
        // –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∏–º–µ–Ω–Ω–æ –≤—ã–±—Ä–∞–Ω–Ω—É—é –∏–∫–æ–Ω–∫—É
        icon: newCategory.icon 
      }));
      
      setShowModal(false);
      setNewCategory({
        name: '',
        type: 'expense',
        icon: 'üí∞',
        color: '#4CAF50',
        customIcon: ''
      });
      setShowCustomIconInput(false);
      
      toast.success('–ö–∞—Ç–µ–≥–æ—Ä–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–∞');
    } catch (error) {
      toast.error('–ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é');
    }
  };

  const handleDeleteCategory = async (categoryId) => {
    const confirmMessage = `–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —ç—Ç—É –∫–∞—Ç–µ–≥–æ—Ä–∏—é? 
      ${defaultIncomeCategories.concat(defaultExpenseCategories).some(c => c.id === categoryId) 
        ? '–≠—Ç–æ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è, –æ–Ω–∞ –±—É–¥–µ—Ç —Å–∫—Ä—ã—Ç–∞.' 
        : '–í—Å–µ —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –æ—Å—Ç–∞–Ω—É—Ç—Å—è –±–µ–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏.'}`;
    
    if (window.confirm(confirmMessage)) {
      try {
        await dispatch(deleteCategory(categoryId));
        toast.success('–ö–∞—Ç–µ–≥–æ—Ä–∏—è —É–¥–∞–ª–µ–Ω–∞');
      } catch (error) {
        toast.error(error.message || '–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é');
      }
    }
  };

  if (loading) return (
    <div className="flex justify-center items-center h-screen">
      <div className="animate-spin rounded-full h-12 w-12 border-t-2 border-b-2 border-blue-500"></div>
    </div>
  );
  
  if (error) return <div className="p-4 text-red-500">–û—à–∏–±–∫–∞: {error}</div>;
  if (!user) return <div className="p-4">–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω</div>;

  return (
    <div className={styles.container}>
      <div className={styles.header}>
        <h1 className={styles.title}>
          <i className={`${styles.icon} fas fa-tags`}></i>
          Categories settings
        </h1>
        <button 
          onClick={() => setShowModal(true)}
          className={styles.addButton}
        >
          <i className="fas fa-plus"></i> New category
        </button>
      </div>

      <Link to="/dashboard" className={styles.backLink}>
        <i className="fas fa-arrow-left"></i> Back
      </Link>

      {/*–¥–æ—Ö–æ–¥*/}
      <section className={styles.section}>
        <h2 className={styles.sectionTitle}>
          <i className={`${styles.sectionIcon} fas fa-money-bill-wave`}></i>
          Incomes
          <span className={styles.countBadge}>
            {defaultIncomeCategories.length + userIncomeCategories.length}
          </span>
        </h2>
        
        <div className={styles.categoriesGrid}>
          {defaultIncomeCategories.map(category => (
            <CategoryCard 
              key={category.id} 
              category={category} 
              isDefault={true}
              onDelete={handleDeleteCategory}
            />
          ))}
          {userIncomeCategories.map(category => (
            <CategoryCard 
              key={category.id} 
              category={category} 
              isDefault={false}
              onDelete={handleDeleteCategory}
            />
          ))}
        </div>
      </section>

      {/* —Ä–∞—Å—Ö–æ–¥ */}
      <section className={styles.section}>
        <h2 className={styles.sectionTitle}>
          <i className={`${styles.sectionIcon} fas fa-shopping-cart`}></i>
          Expenses
          <span className={styles.countBadge}>
            {defaultExpenseCategories.length + userExpenseCategories.length}
          </span>
        </h2>
        
        <div className={styles.categoriesGrid}>
          {defaultExpenseCategories.map(category => (
            <CategoryCard 
              key={category.id} 
              category={category} 
              isDefault={true}
              onDelete={handleDeleteCategory}
            />
          ))}
          {userExpenseCategories.map(category => (
            <CategoryCard 
              key={category.id} 
              category={category} 
              isDefault={false}
              onDelete={handleDeleteCategory}
            />
          ))}
        </div>
      </section>

      {showModal && (
  <div className={styles.modalOverlay}>
    <div className={styles.modal}>
      <div className={styles.modalHeader}>
        <h2 className={styles.modalTitle}>
          <i className={`${styles.modalIcon} fas fa-plus-circle`}></i>
          New category
        </h2>
        <button 
          onClick={() => {
            setShowModal(false);
            setShowCustomIconInput(false);
            setNewCategory({
              name: '',
              type: 'expense',
              icon: 'üí∞',
              color: '#4CAF50',
              customIcon: ''
            });
          }}
          className={styles.closeButton}
        >
          <i className="fas fa-times"></i>
        </button>
      </div>

      <form onSubmit={handleAddCategory} className={styles.modalForm}>
        {/* –ü–æ–ª–µ –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ */}
        <div className={styles.formGroup}>
          <label className={styles.formLabel}>Type </label>
          <div className={styles.toggleGroup}>
            <button
              type="button"
              className={`${styles.toggleButton} ${
                newCategory.type === 'income' ? styles.toggleButtonActive : ''
              }`}
              onClick={() => setNewCategory({...newCategory, type: 'income'})}
            >
              <i className="fas fa-arrow-down"></i> Income
            </button>
            <button
              type="button"
              className={`${styles.toggleButton} ${
                newCategory.type === 'expense' ? styles.toggleButtonActive : ''
              }`}
              onClick={() => setNewCategory({...newCategory, type: 'expense'})}
            >
              <i className="fas fa-arrow-up"></i> Expenses
            </button>
          </div>
        </div>

        {/* –ü–æ–ª–µ –Ω–∞–∑–≤–∞–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ */}
        <div className={styles.formGroup}>
          <label htmlFor="categoryName" className={styles.formLabel}>
            Category name
          </label>
          <div className={styles.inputWithIcon}>
            <i className={`${styles.inputIcon} fas fa-tag`}></i>
            <input
              id="categoryName"
              type="text"
              value={newCategory.name}
              onChange={(e) => setNewCategory({...newCategory, name: e.target.value})}
              className={styles.formInput}
              placeholder="Example: foods"
              required
            />
          </div>
        </div>

        {/* –ü–æ–ª–µ –≤—ã–±–æ—Ä–∞ –∏–∫–æ–Ω–∫–∏ */}
        <div className={styles.formGroup}>
          <label className={styles.formLabel}>Icons</label>
          
          {!showCustomIconInput ? (
            <>
              <div className={styles.emojiGrid}>
                {Object.entries(EMOJI_GROUPS).map(([group, icons]) => (
                  <details key={group} className={styles.emojiGroup}>
                    <summary className={styles.emojiGroupTitle}>
                      <i className={`${styles.groupIcon} fas fa-${
                        group === 'Food' ? 'utensils' :
                        group === 'Transport' ? 'car' :
                        group === 'Finance' ? 'money-bill-wave' :
                        group === 'Entertainment' ? 'gamepad' :
                        group === 'Shopping' ? 'shopping-bag' :
                        group === 'Health' ? 'heartbeat' :
                        group === 'Education' ? 'graduation-cap' :
                        group === 'Home' ? 'home' : 'star'                        
                      }`}></i>
                      {group}
                    </summary>
                    <div className={styles.emojiGroupContent}>
                      {icons.map(emoji => (
                        <button
                          type="button"
                          key={emoji}
                          onClick={() => setNewCategory({...newCategory, icon: emoji})}
                          className={`${styles.emojiButton} ${
                            newCategory.icon === emoji ? styles.emojiButtonActive : ''
                          }`}
                        >
                          {emoji}
                        </button>
                      ))}
                    </div>
                  </details>
                ))}
              </div>
              
              <button
                type="button"
                onClick={() => setShowCustomIconInput(true)}
                className={styles.customIconButton}
              >
                <i className="fas fa-edit"></i> Upload your own icon
              </button>
            </>
          ) : (
            <div className={styles.customIconContainer}>
              <div className={styles.inputWithIcon}>
                <i className={`${styles.inputIcon} fas fa-icons`}></i>
                <input
                  type="text"
                  value={newCategory.customIcon}
                  onChange={(e) => setNewCategory({
                    ...newCategory, 
                    customIcon: e.target.value,
                    icon: e.target.value
                  })}
                  className={styles.formInput}
                  placeholder="Enter an emoji (e.g., üöó)" 
                  maxLength="2"
                />
              </div>
              <button
                type="button"
                onClick={() => {
                  setShowCustomIconInput(false);
                  setNewCategory({...newCategory, customIcon: ''});
                }}
                className={styles.cancelCustomIcon}
              >
                <i className="fas fa-times"></i> Cancel
              </button>
            </div>
          )}
        </div>

        {/* –ü—Ä–µ–≤—å—é –∏–∫–æ–Ω–∫–∏ */}
        <div className={styles.iconPreview}>
          <span 
            className={styles.previewIcon}
            style={{ 
              backgroundColor: `${newCategory.color}20`,
              color: newCategory.color
            }}
          >
            {newCategory.icon}
          </span>
          <span className={styles.previewText}>
            This is how your icon will look
          </span>
        </div>

        {/* –ü–æ–ª–µ –≤—ã–±–æ—Ä–∞ —Ü–≤–µ—Ç–∞ */}
        <div className={styles.formGroup}>
          <label className={styles.formLabel}>Category color</label>
          <div className={styles.colorPickerContainer}>
            <input
              type="color"
              value={newCategory.color}
              onChange={(e) => setNewCategory({...newCategory, color: e.target.value})}
              className={styles.colorInput}
            />
            <span className={styles.colorValue}>{newCategory.color}</span>
          </div>
        </div>

        {/* –ö–Ω–æ–ø–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ */}
        <button
          type="submit"
          className={styles.submitButton}
          disabled={!newCategory.name || !newCategory.icon}
        >
          <i className="fas fa-check"></i> Create category
        </button>
      </form>
    </div>
  </div>
)}
    </div>
  );
}

function CategoryCard({ category, isDefault, onDelete }) {
  return (
    <div className={`${styles.categoryCard} ${isDefault ? styles.defaultCard : ''}`}>
      <div className={styles.categoryIconWrapper} style={{ backgroundColor: `${category.color}20` }}>
        <span style={{ color: category.color }}>{category.icon}</span>
      </div>
      
      <div className={styles.categoryInfo}>
        <h3 className={styles.categoryName}>{category.name}</h3>
        <span className={styles.categoryType}>
          {isDefault ? 'Default' : 'Custom'}
        </span>
      </div>
      
      {!isDefault && (
        <button 
          onClick={() => onDelete(category.id)}
          className={styles.deleteButton}
          title="Delete category"
        >
          <i className="fas fa-trash-alt"></i>
        </button>
      )}
    </div>
  );
}